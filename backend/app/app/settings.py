"""
Django settings for app project.

Generated by 'django-admin startproject' using Django 5.2.3.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
from decouple import config
import os

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-tz-^0_e%qv2&ac4e1$viah-tr=gby9=0grcdeu_yp0kcop^_1%'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['*']


# Application definition

INSTALLED_APPS = [
    'my_app1.apps.MyApp1Config',
    'rest_framework',
        'corsheaders',
    'drf_yasg',
    'storages',
    'django.contrib.postgres',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'app.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'app.wsgi.application'

REST_FRAMEWORK = {
    'DEFAULT_PERMISSION_CLASSES': (
        'rest_framework.permissions.AllowAny',
    )
}

CORS_ALLOW_ALL_ORIGINS = True  # Для разработки, в продакшене укажите конкретные домены
AUTH_USER_MODEL = 'my_app1.User'

# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

# Получаем настройки БД
db_host = config('DATABASE_HOST', default='localhost')
db_port = config('DATABASE_PORT', default='5432')
db_name = config('DATABASE_NAME', default='antrakt')
db_user = config('DATABASE_USER', default='postgres')
db_password = config('DATABASE_PASSWORD', default='123')

# Используем PostgreSQL без предварительной проверки доступности
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': db_name,
        'USER': db_user,
        'PASSWORD': db_password,
        'HOST': db_host,
        'PORT': db_port,
    }
}
print(f"✓ Настроена конфигурация PostgreSQL: {db_host}:{db_port}")

# Admin panel access key (set via env ADMIN_PANEL_KEY)
ADMIN_PANEL_KEY = config('ADMIN_PANEL_KEY', default='dev-admin-key')

# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Development settings
if os.name == 'nt':  # Windows development
    # Для Windows разработки используем localhost
    DATABASES['default']['HOST'] = config('DATABASE_HOST', default='localhost')
else:  # Linux/Mac development
    DATABASES['default']['HOST'] = config('DATABASE_HOST', default='localhost')

# Media files configuration
MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

# File upload settings
FILE_UPLOAD_MAX_MEMORY_SIZE = 10 * 1024 * 1024  # 10MB
DATA_UPLOAD_MAX_MEMORY_SIZE = 10 * 1024 * 1024  # 10MB

# S3/MinIO storage configuration
# These defaults match docker-compose (user/pass) and local MinIO at http://localhost:9000
USE_MINIO_STORAGE = config('USE_MINIO_STORAGE', default=True, cast=bool)
if USE_MINIO_STORAGE:
    AWS_ACCESS_KEY_ID = config('MINIO_ACCESS_KEY', default='minioadmin')
    AWS_SECRET_ACCESS_KEY = config('MINIO_SECRET_KEY', default='minioadmin123')
    AWS_STORAGE_BUCKET_NAME = config('MINIO_BUCKET_NAME', default='antrakt-images')
    AWS_S3_REGION_NAME = config('MINIO_REGION', default='us-east-1')
    # Ensure endpoint has scheme; boto3 requires a full URL like http://minio:9000
    RAW_MINIO_ENDPOINT = config('MINIO_ENDPOINT', default='http://localhost:9000')
    if not (str(RAW_MINIO_ENDPOINT).startswith('http://') or str(RAW_MINIO_ENDPOINT).startswith('https://')):
        RAW_MINIO_ENDPOINT = f"http://{RAW_MINIO_ENDPOINT}"
    AWS_S3_ENDPOINT_URL = RAW_MINIO_ENDPOINT
    AWS_S3_SIGNATURE_VERSION = 's3v4'
    AWS_S3_ADDRESSING_STYLE = 'path'
    AWS_QUERYSTRING_AUTH = False  # make public, signed URLs not required
    AWS_DEFAULT_ACL = 'public-read'
    AWS_S3_URL_PROTOCOL = config('MINIO_URL_PROTOCOL', default='http:')

    # Build custom domain like "localhost:9000/<bucket>"
    _endpoint_no_scheme = AWS_S3_ENDPOINT_URL.replace('https://', '').replace('http://', '')
    AWS_S3_CUSTOM_DOMAIN = config(
        'MINIO_CUSTOM_DOMAIN',
        default=f"{_endpoint_no_scheme}/{AWS_STORAGE_BUCKET_NAME}"
    )

    # Use S3-backed storage for Django file storage
    DEFAULT_FILE_STORAGE = 'storages.backends.s3boto3.S3Boto3Storage'

    # MEDIA_URL should point to MinIO public HTTP endpoint
    MEDIA_URL = f"{AWS_S3_URL_PROTOCOL}//{AWS_S3_CUSTOM_DOMAIN}/"

# Настройки для работы с разными типами БД
print("✓ Используется PostgreSQL с полной функциональностью")
